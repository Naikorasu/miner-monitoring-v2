let axios,moment,fs,Table;_def‍.x([["default",()=>_def‍.o]]);_def‍.w("axios",[["default",["axios"],function(v){axios=v}]]);_def‍.w("moment",[["default",["moment"],function(v){moment=v}]]);_def‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_def‍.w("tty-table",[["default",["Table"],function(v){Table=v}]]);




var gpudataset = undefined;

class HiveOS {
	constructor({ apiHost, apiVersion, apiToken, farmID, workerID }) {
		this.host = apiHost;
		this.version = apiVersion;
		this.token = apiToken;
		this.farmId = farmId;
		this.workerId = workerId;
	}

	getGPUSInfo() {
		var url =
			this.host +
			"/api/" +
			this.version +
			"/farms/" +
			this.farm_id +
			"/workers";

		axios
			.get(url, {
				headers: {},
			})
			.then((response) => {
				_def‍.g.console.log("RESPONSE :", response);
				//console.log("RESPONSE");
				gpudataset = response.data;
				this.setData("GPUDATASET", gpudataset);
			})
			.catch((err) => {
				console.log("\x1b[31m", "GET GPUS DETAIL ERROR", "\x1b[0m");
				_def‍.g.console.log(err);
			});
	}

	getData(key) {
		try {
			let rawdata = fs.readFileSync("data.json");
			let data = JSON.parse(rawdata);
			//console.log(data[key]);
			return data[key];
		} catch (err) {
			_def‍.g.console.log(err);
			return null;
		}

		// require("dotenv").config();
		// return process.env[param];
	}

	setData(key, value) {
		//console.log("SETDATA : ", key, value);

		try {
			let raw = fs.readFileSync("data.json");
			var save = JSON.parse(raw);

			save[key] = value;

			//console.log(save);

			fs.writeFile("data.json", JSON.stringify(save), function (err, data) {
				if (err) {
					return _def‍.g.console.log("ERROR:", err);
				}
				//console.log(data);
			});
		} catch (err) {
			_def‍.g.console.log("ERROR:", err);
		}
		// require("dotenv").config();
		// process.env[param] = data;
	}

	tableSet() {
		gpudataset = this.getData("GPUDATASET");

		try {
			if (gpudataset != undefined || gpudataset != "undefined") {
				_def‍.g.console.log("GPUDATASET:", gpudataset);
			}
		} catch (err) {
			_def‍.g.console.log("ERROR:", err);
		}
	}
}

_def‍.d(HiveOS);
